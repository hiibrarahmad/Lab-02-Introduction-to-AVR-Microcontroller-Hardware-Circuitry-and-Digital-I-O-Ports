
LAB2 TASK2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000128  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007ac  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006db  00000000  00000000  000009c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f0  00000000  00000000  000010a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001394  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ab  00000000  00000000  000013d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000007e  00000000  00000000  00001783  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001801  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  78:	0c 94 92 00 	jmp	0x124	; 0x124 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <init_ports_mcu>:
#define DEBOUNCE_TIME 25 // time to wait while "de-bouncing" button
#define LOCK_INPUT_TIME 300 // time to wait after a button press

void init_ports_mcu()
{
	DDRB=0xFFu; //	Set all pins of the PORTB as output.
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1<<BUTTON1);//Makes first pin of PORTB as Input
  84:	94 b1       	in	r25, 0x04	; 4
  86:	9d 7f       	andi	r25, 0xFD	; 253
  88:	94 b9       	out	0x04, r25	; 4
	PORTB = 0xFF;  // Set all pins of the PORTB as HIGH. Led is turn on, also the internal Pull Up resistor of first pin PORTB is enable.
  8a:	85 b9       	out	0x05, r24	; 5

	
	DDRC=0xFFu; //	Set all pins of the PORTC as output.
  8c:	87 b9       	out	0x07, r24	; 7
	PORTC=0x00u; // Set all pins of PORTC low which turns it off.
  8e:	18 b8       	out	0x08, r1	; 8

	DDRD=0xFFu; //	Set all pins of the PORTD as output.
  90:	8a b9       	out	0x0a, r24	; 10
	PORTD=0x00u; // Set all pins of PORTD low which turns it off.
  92:	1b b8       	out	0x0b, r1	; 11
  94:	08 95       	ret

00000096 <button_state>:
}

unsigned char button_state()
{
	/* the button is pressed when BUTTON1 bit is clear */
	if (!(PINB & (1<<BUTTON1)))
  96:	93 b1       	in	r25, 0x03	; 3
  98:	89 2f       	mov	r24, r25
  9a:	82 70       	andi	r24, 0x02	; 2
  9c:	91 fd       	sbrc	r25, 1
  9e:	0d c0       	rjmp	.+26     	; 0xba <button_state+0x24>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	2f e7       	ldi	r18, 0x7F	; 127
  a2:	38 e3       	ldi	r19, 0x38	; 56
  a4:	91 e0       	ldi	r25, 0x01	; 1
  a6:	21 50       	subi	r18, 0x01	; 1
  a8:	30 40       	sbci	r19, 0x00	; 0
  aa:	90 40       	sbci	r25, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <button_state+0x10>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <button_state+0x1a>
  b0:	00 00       	nop
	{
		_delay_ms(DEBOUNCE_TIME);
		if (!(PINB & (1<<BUTTON1))) return 1;
  b2:	19 99       	sbic	0x03, 1	; 3
  b4:	03 c0       	rjmp	.+6      	; 0xbc <button_state+0x26>
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	08 95       	ret
	}
	return 0;
  ba:	80 e0       	ldi	r24, 0x00	; 0
}
  bc:	08 95       	ret

000000be <main>:

int main (void)
{
	unsigned char n_led = 1; // LED number is on now
	init_ports_mcu();
  be:	0e 94 40 00 	call	0x80	; 0x80 <init_ports_mcu>
	return 0;
}

int main (void)
{
	unsigned char n_led = 1; // LED number is on now
  c2:	c1 e0       	ldi	r28, 0x01	; 1
	init_ports_mcu();
	while (1)
	{
		if (button_state()) // If the button is pressed, toggle the LED's state and delay for 300ms (#define LOCK_INPUT_TIME)
  c4:	0e 94 4b 00 	call	0x96	; 0x96 <button_state>
  c8:	88 23       	and	r24, r24
  ca:	e1 f3       	breq	.-8      	; 0xc4 <main+0x6>
		{

			switch(n_led){
  cc:	c2 30       	cpi	r28, 0x02	; 2
  ce:	69 f0       	breq	.+26     	; 0xea <main+0x2c>
  d0:	c3 30       	cpi	r28, 0x03	; 3
  d2:	a1 f0       	breq	.+40     	; 0xfc <main+0x3e>
  d4:	c1 30       	cpi	r28, 0x01	; 1
  d6:	d9 f4       	brne	.+54     	; 0x10e <main+0x50>
				case 1:
				PORTB ^= (1<<LED1); // toggling the current state of the pin LED1. LED1 is turn off.
  d8:	95 b1       	in	r25, 0x05	; 5
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	89 27       	eor	r24, r25
  de:	85 b9       	out	0x05, r24	; 5
				PORTC ^= (1<<LED2); // toggling the current state of the pin LED2. LED2 is turn on.
  e0:	98 b1       	in	r25, 0x08	; 8
  e2:	82 e0       	ldi	r24, 0x02	; 2
  e4:	89 27       	eor	r24, r25
  e6:	88 b9       	out	0x08, r24	; 8
				break;
  e8:	12 c0       	rjmp	.+36     	; 0x10e <main+0x50>
				case 2:
				PORTC ^= (1<<LED2); // toggling the current state of the pin LED2. LED2 is turn off.
  ea:	98 b1       	in	r25, 0x08	; 8
  ec:	82 e0       	ldi	r24, 0x02	; 2
  ee:	89 27       	eor	r24, r25
  f0:	88 b9       	out	0x08, r24	; 8
				PORTD ^= (1<<LED3); // toggling the current state of the pin LED3. LED3 is turn on.
  f2:	9b b1       	in	r25, 0x0b	; 11
  f4:	84 e0       	ldi	r24, 0x04	; 4
  f6:	89 27       	eor	r24, r25
  f8:	8b b9       	out	0x0b, r24	; 11
				break;
  fa:	09 c0       	rjmp	.+18     	; 0x10e <main+0x50>
				case 3:
				PORTD ^= (1<<LED3); // toggling the current state of the pin LED3. LED3 is turn off.
  fc:	9b b1       	in	r25, 0x0b	; 11
  fe:	84 e0       	ldi	r24, 0x04	; 4
 100:	89 27       	eor	r24, r25
 102:	8b b9       	out	0x0b, r24	; 11
				PORTB ^= (1<<LED1); // toggling the current state of the pin LED1. LED1 is turn on.
 104:	95 b1       	in	r25, 0x05	; 5
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	89 27       	eor	r24, r25
 10a:	85 b9       	out	0x05, r24	; 5
				n_led=0; // reset LED number
 10c:	c0 e0       	ldi	r28, 0x00	; 0
				break;
			}
			n_led++; // next LED is turn on
 10e:	cf 5f       	subi	r28, 0xFF	; 255
 110:	2f ef       	ldi	r18, 0xFF	; 255
 112:	85 ea       	ldi	r24, 0xA5	; 165
 114:	9e e0       	ldi	r25, 0x0E	; 14
 116:	21 50       	subi	r18, 0x01	; 1
 118:	80 40       	sbci	r24, 0x00	; 0
 11a:	90 40       	sbci	r25, 0x00	; 0
 11c:	e1 f7       	brne	.-8      	; 0x116 <main+0x58>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <main+0x62>
 120:	00 00       	nop
 122:	d0 cf       	rjmp	.-96     	; 0xc4 <main+0x6>

00000124 <_exit>:
 124:	f8 94       	cli

00000126 <__stop_program>:
 126:	ff cf       	rjmp	.-2      	; 0x126 <__stop_program>
